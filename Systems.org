#+TITLE: System Configuration with Guix
#+PROPERTY: header-args    :tangle-mode (identity #o444)
#+PROPERTY: header-args:sh :tangle-mode (identity #o555)

* Introduction

This file contains system configuration code for [[https://guix.gnu.org][GNU Guix]]. Inspired by work of David Wilson.
- [[https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ][System Crafters]] on Youtube
- [[https://github.com/daviwil/dotfiles][daviwil/dotfiles]] on Github

* Channels

Guix supports the concept of [[https://guix.gnu.org/manual/en/html_node/Channels.html#Channels][channels]] which basically amount to Git repositories which contain Guix package definitions that can be installed on your machine.  Aside from the =%default-channels= list, I also use the [[https://gitlab.com/nonguix/nonguix][Nonguix]] channel to install packages that aren't included with Guix by default like the non-free Linux kernel.

See *.config/guix/channels.scm:*

* Systems

** Base Configuration

This base configuration is shared between all of the machines I manage with Guix.  Since all of my machines are Lenovo ThinkPad laptops, the same basic configuration applies pretty cleanly across all of them.  This may change in the future.

Any configuration that derives from =base-operating-system= must invoke =guix system= in a specific way to ensure it gets loaded correctly:

#+begin_src sh

  sudo -E guix system -L ~/.config/guix/include reconfigure ~/.config/guix/systems/sugar-glider.scm

#+end_src

*.config/guix/include/base-system.scm:*

#+begin_src scheme :tangle .config/guix/include/base-system.scm

  ;; NOTE: This file is generated from ~/.dotfiles/System.org.  Please see commentary there.

  (define-module (base-system)
    #:use-module (srfi srfi-1)
    #:use-module (gnu)
    #:use-module (gnu system nss)
    #:use-module (gnu system locale)
    #:use-module (gnu services cups)
    #:use-module (gnu services desktop)
    #:use-module (gnu services docker)
    #:use-module (gnu services networking)
    #:use-module (gnu services nix)
    #:use-module (gnu services pm)
    #:use-module (gnu services virtualization)
    #:use-module (gnu services xorg)
    #:use-module (gnu packages audio)
    #:use-module (gnu packages certs)
    #:use-module (gnu packages cups)
    #:use-module (gnu packages display-managers)
    #:use-module (gnu packages emacs)
    #:use-module (gnu packages file-systems)
    #:use-module (gnu packages freedesktop)
    #:use-module (gnu packages gnome)
    #:use-module (gnu packages gnome-xyz)
    #:use-module (gnu packages gtk)
    #:use-module (gnu packages linux)
    #:use-module (gnu packages mtools)
    #:use-module (gnu packages package-management)
    #:use-module (gnu packages pulseaudio)
    #:use-module (gnu packages shells)
    #:use-module (gnu packages ssh)
    #:use-module (gnu packages version-control)
    #:use-module (gnu packages vim)
    #:use-module (gnu packages web-browsers)
    #:use-module (gnu packages wm)
    #:use-module (gnu packages xorg))

#+end_src

Add a =udev= rule to enable members of the =video= group to control screen brightness.

#+begin_src scheme :tangle .config/guix/include/base-system.scm

  ;; Allow members of the "video" group to change the screen brightness.
  (define %backlight-udev-rule
    (udev-rule
     "90-backlight.rules"
     (string-append "ACTION==\"add\", SUBSYSTEM==\"backlight\", "
                    "RUN+=\"/run/current-system/profile/bin/chgrp video /sys/class/backlight/%k/brightness\""
                    "\n"
                    "ACTION==\"add\", SUBSYSTEM==\"backlight\", "
                    "RUN+=\"/run/current-system/profile/bin/chmod g+w /sys/class/backlight/%k/brightness\"")))

#+end_src

Override the default =%desktop-services= to add the =udev= backlight configuration and include OpenVPN in the list of NetworkManager plugins.

#+begin_src scheme :tangle .config/guix/include/base-system.scm

  (define %my-laptop-services
    (modify-services
     %desktop-services
     (elogind-service-type
      config =>
      (elogind-configuration (inherit config)
                             (handle-lid-switch-external-power 'suspend)))
     (udev-service-type
      config =>
      (udev-configuration (inherit config)
                          (rules (cons %backlight-udev-rule
                                       (udev-configuration-rules config)))))
     (network-manager-service-type
      config =>
      (network-manager-configuration (inherit config)
                                     (vpn-plugins (list network-manager-openvpn))))))

#+end_src

Use the =libinput= driver for all input devices since it's a bit more modern than the default.

#+begin_src scheme :tangle .config/guix/include/base-system.scm

  (define %xorg-libinput-config
    "Section \"InputClass\"
    Identifier \"Touchpads\"
    Driver \"libinput\"
    MatchDevicePath \"/dev/input/event*\"
    MatchIsTouchpad \"on\"

    Option \"Tapping\" \"on\"
    Option \"TappingDrag\" \"on\"
    Option \"DisableWhileTyping\" \"on\"
    Option \"MiddleEmulation\" \"on\"
    Option \"ScrollMethod\" \"twofinger\"
  EndSection
  Section \"InputClass\"
    Identifier \"Keyboards\"

    Driver \"libinput\"
    MatchDevicePath \"/dev/input/event*\"
    MatchIsKeyboard \"on\"
  EndSection
  ")

#+end_src

Define keyboards. =xkbcli list= reports keyboard configuration parameters.

#+begin_src scheme :tangle .config/guix/include/base-system.scm

  (define-public %thinkpad-keyboard
    (keyboard-layout "us" "colemak"
                     #:options '("ctrl:swapcaps")
                     #:model "thinkpad"))

  (define-public %desktop-keyboard
    ;; description: English (intl., with AltGr dead keys)
    (keyboard-layout "us" "altgr-intl"))
                     ;;#:options '("ctrl:swapcaps")))

#+end_src

Define the user account to be used on all machines.

#+begin_src scheme :tangle .config/guix/include/base-system.scm

  (define-public %boring-user
    (user-account
     (name "boring")
     (comment "Device owner")
     (group "users")
     (uid 1000)
     (home-directory "/home/boring")
     (supplementary-groups
      '("wheel" "netdev" "audio" "video" "input"))))

#+end_src

Define the =base-operating-system= which will be inherited by all machine configurations.

#+begin_src scheme :tangle .config/guix/include/base-system.scm

  (define-public base-operating-system
    (operating-system
     (host-name "hackstock")
     (timezone "Europe/Ljubljana")

     (locale "en_US.utf8")
     (locale-libcs (list glibc-2.30 (canonical-package glibc)))
     (locale-definitions
      (list (locale-definition
             (name "sl_SI.utf8") (source "sl_SI"))
            (locale-definition
             (name "en_US.utf8") (source "en_US"))))

     (keyboard-layout %thinkpad-keyboard)

     ;; Use the UEFI variant of GRUB with the EFI System
     ;; Partition mounted on /boot/efi.
     (bootloader
      (bootloader-configuration
       (bootloader grub-efi-bootloader)
       (targets (list "/boot/efi"))
       (keyboard-layout keyboard-layout)))

     ;; Guix doesn't like it when there isn't a file-systems
     ;; entry, so add one that is meant to be overridden
     (file-systems %base-file-systems)

     (users
      (cons* %boring-user
             %base-user-accounts))

     ;; Add the 'realtime' group
     ;; (groups (cons (user-group (system? #t) (name "realtime"))
     ;;              %base-groups))

     ;; Install bare-minimum system packages
     (packages
      (append (list
               emacs
               exfat-utils
               fuse-exfat
               git
               guix-simplyblack-sddm-theme
               gvfs          ;; for user mounts
               numix-gtk-theme
               myrepos
               nss-certs     ;; for HTTPS access
               ntfs-3g
               nushell
               openssh
               stow
               vim
               xf86-input-libinput)
              %base-packages))

     ;; Use the "desktop" services, which include the X11 log-in service,
     ;; networking with NetworkManager, and more
     (services
      (append
       (list (service gnome-desktop-service-type)
             (bluetooth-service #:auto-enable? #t)
             (service nix-service-type)
             (set-xorg-configuration
              (xorg-configuration
               (keyboard-layout keyboard-layout))))
       %my-laptop-services))
     ;; Allow resolution of '.local' host names with mDNS
     (name-service-switch %mdns-host-lookup-nss)))
#+end_src

** Machines

*** sugar-glider

=sugar-glider= is a Lenovo Thinkpad X220.

*.config/guix/systems/sugar-glider.scm:*

#+begin_src scheme :tangle .config/guix/systems/sugar-glider.scm

  ;; NOTE: This file is generated from ~/.dotfiles/System.org.  Please see commentary there.

  (define-module (sugar-glider)
    #:use-module (base-system)
    #:use-module (gnu)
    #:use-module (nongnu packages linux)
    #:use-module (nongnu system linux-initrd))

  (operating-system
   (inherit base-operating-system)
   (host-name "sugar-glider")

   ;; Use non-free Linux and firmware
   (kernel linux)
   (firmware (list linux-firmware))
   (initrd microcode-initrd)

   (mapped-devices
    (list (mapped-device
           (source (uuid "1a8cd693-c190-46b9-82a8-cfd1cc357cb0"))
           (target "crypthome")
           (type luks-device-mapping))))

   (file-systems (append
                  (list (file-system
                         (device (file-system-label "GuixSD"))
                         (mount-point "/")
                         (flags '(no-atime))
                         (type "ext4"))
                        (file-system
                         (device (file-system-label "crypthome"))
                         (mount-point "/home")
                         (type "ext4")
                         (dependencies mapped-devices))
                        (file-system
                         (device (uuid "BC7D-5BD2" 'fat))
                         (mount-point "/boot/efi")
                         (type "vfat")))
                  %base-file-systems)))

#+end_src

*** golden-retriever

=golden-retriever= is an old Lenovo Thinkpad X200.

*.config/guix/systems/golden-retriever.scm:*

#+begin_src scheme :tangle .config/guix/systems/golden-retriever.scm

  ;; NOTE: This file is generated from ~/.dotfiles/System.org.  Please see commentary there.

  (define-module (golden-retriever)
    #:use-module (base-system)
    #:use-module (gnu))

  (operating-system
   (inherit base-operating-system)
   (host-name "golden-retriever")

   (keyboard-layout (keyboard-layout "us" "colemak"
                                     #:options '("ctrl:swapcaps")
                                     #:model "thinkpad"))
   (bootloader
    (bootloader-configuration
     (bootloader grub-bootloader)
     (targets (list "/dev/sda"))
     (keyboard-layout keyboard-layout)))
   (swap-devices (list "/dev/sda1"))
   (file-systems
    (cons* (file-system
            (mount-point "/home")
            (device
             (uuid "85884235-38e7-48cd-a0b7-a64497b695eb"
                   'ext4))
            (type "ext4"))
           (file-system
            (mount-point "/")
            (device
             (uuid "c66206f8-9d45-457c-a3d2-095141bcc109"
                   'ext4))
            (flags '(no-atime))
            (type "ext4"))
           %base-file-systems)))

#+end_src

*** elephant

=elephant= is a Core 2 Duo desktop PC

*.config/guix/systems/elephant.scm:*

#+begin_src scheme :tangle .config/guix/systems/elephant.scm

    ;; NOTE: This file is generated from ~/.dotfiles/System.org.  Please
    ;; see commentary there.

  (define-module (elephant)
    #:use-module (base-system)
    #:use-module (guix transformations)
    #:use-module (gnu)
    #:use-module (gnu packages linux)
    #:use-module (gnu packages version-control)
    #:use-module (gnu packages ssh)
    #:use-module (gnu packages xorg)
    #:use-module (gnu packages gnome)
    #:use-module (gnu services desktop)
    #:use-module (gnu services linux)
    #:use-module (gnu services ssh)
    #:use-module (gnu services sddm)
    #:use-module (gnu services xorg)
    #:use-module (gnu services nix)
    #:use-module (nongnu system linux-initrd)
    #:use-module (nongnu packages linux)
    #:use-module (nongnu packages nvidia))

  (define transform
    (options->transformation
     '((with-graft . "mesa=nvda"))))

  (operating-system
   (inherit base-operating-system)
   (host-name "elephant")

   ;; (kernel linux-lts)
   ;; (kernel-arguments (append
   ;;                    '("modprobe.blacklist=nouveau nvidia-drm.modeset=1")
   ;;                    %default-kernel-arguments))
   ;; (kernel-loadable-modules (list nvidia-driver))
   (initrd microcode-initrd)

   (keyboard-layout %desktop-keyboard)

   (bootloader
    (bootloader-configuration
     (bootloader grub-bootloader)
     (targets (list "/dev/sdd"))
     (theme (grub-theme
             (inherit (grub-theme))
             (gfxmode '("1920x1080" "1280x720" "auto"))))
     (keyboard-layout %desktop-keyboard)))

   (users
    (cons* (user-account
            (name "git")
            (group "users")
            (comment "Account for git acces")
            (home-directory "/mnt/ServerStore/git")
            (shell (file-append git "/bin/git-shell"))
            (system? #t))
           %boring-user
           %base-user-accounts))

   (swap-devices (list (swap-space
                        (target (file-system-label "SlowSwap")))))

   (file-systems (append
                  (list (file-system
                         (device (file-system-label "GuixSD"))
                         (mount-point "/")
                         (flags '(no-atime))
                         (type "ext4"))
                        (file-system
                         (device (file-system-label "Home"))
                         (mount-point "/home")
                         (type "ext4"))
                        (file-system
                         (device (file-system-label "MainStorage"))
                         (mount-point "/mnt/MainStorage")
                         (type "ext4"))
                        (file-system
                         (device (file-system-label "ServerStore"))
                         (mount-point "/mnt/ServerStore")
                         (type "ext4")))
                  %base-file-systems))

   (services
    (append
     (list (service gnome-desktop-service-type)
           ;; (simple-service
           ;;  'custom-udev-rules udev-service-type
           ;;  (list nvidia-driver))
           ;; (service kernel-module-loader-service-type
           ;;          '("ipmi_devintf"
           ;;            "nvidia"
           ;;            "nvidia_modeset"
           ;;            "nvidia_uvm"))
           (service nix-service-type)
           (service sddm-service-type
                    (sddm-configuration
                     (display-server "wayland")
                     (theme "guix-simplyblack-sddm")
                     (xorg-configuration
                      (xorg-configuration
                       ;; (modules (cons* nvidia-driver %default-xorg-modules))
                       ;; (server (transform xorg-server))
                       ;; (drivers '("nvidia"))
                       (keyboard-layout %desktop-keyboard)))))
           (service openssh-service-type
                    (openssh-configuration
                     (password-authentication? #f)
                     (subsystems
                      `(("sftp" ,(file-append openssh "/libexec/sftp-server")))))))
     (modify-services
      %desktop-services
      (delete gdm-service-type)
      (guix-service-type
       config => (guix-configuration
                  (inherit config)
                  (substitute-urls
                   (append (list "https://substitutes.nonguix.org")
                           %default-substitute-urls))
                  (authorized-keys
                   (append (list (local-file "./nonguix.pub"))
                           %default-authorized-guix-keys))))))))
#+end_src

Useful links:
- https://guix.gnu.org/manual/en/html_node/Networking-Services.html

** USB Installation Image

To install Guix on another machine, you first to build need a USB image.  Since I use modern laptops that require non-free components, I have to build a custom installation image with the full Linux kernel.  I also include a few other programs that are useful for the installation process.  I adapted this image from [[https://gitlab.com/nonguix/nonguix/blob/master/nongnu/system/install.scm][one found on the Nonguix repository]], hence the copyright header.

*.config/guix/systems/install.scm:*

#+begin_src scheme :tangle .config/guix/systems/install.scm

  ;;; Copyright © 2019 Alex Griffin <a@ajgrf.com>
  ;;; Copyright © 2019 Pierre Neidhardt <mail@ambrevar.xyz>
  ;;; Copyright © 2019 David Wilson <david@daviwil.com>
  ;;;
  ;;; This program is free software: you can redistribute it and/or modify
  ;;; it under the terms of the GNU General Public License as published by
  ;;; the Free Software Foundation, either version 3 of the License, or
  ;;; (at your option) any later version.
  ;;;
  ;;; This program is distributed in the hope that it will be useful,
  ;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;;; GNU General Public License for more details.
  ;;;
  ;;; You should have received a copy of the GNU General Public License
  ;;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;; Generate a bootable image (e.g. for USB sticks, etc.) with:
  ;; $ guix system disk-image nongnu/system/install.scm

  (define-module (nongnu system install)
    #:use-module (gnu system)
    #:use-module (gnu system install)
    #:use-module (gnu packages version-control)
    #:use-module (gnu packages vim)
    #:use-module (gnu packages curl)
    #:use-module (gnu packages emacs)
    #:use-module (gnu packages linux)
    #:use-module (gnu packages mtools)
    #:use-module (gnu packages package-management)
    #:use-module (gnu packages file-systems)
    #:use-module (nongnu packages linux)
    #:export (installation-os-nonfree))

  (define installation-os-nonfree
    (operating-system
      (inherit installation-os)
      (kernel linux)
      (firmware (list linux-firmware))

      ;; Add the 'net.ifnames' argument to prevent network interfaces
      ;; from having really long names.  This can cause an issue with
      ;; wpa_supplicant when you try to connect to a wifi network.
      (kernel-arguments '("quiet" "modprobe.blacklist=radeon" "net.ifnames=0"))

      ;; Add some extra packages useful for the installation process
      (packages
       (append (list exfat-utils fuse-exfat git curl stow vim emacs-no-x-toolkit)
               (operating-system-packages installation-os)))))

  installation-os-nonfree

#+end_src

* Profile Management

I like to separate my packages into separate manifests that get installed as profiles which can be updated independently.  These profiles get installed under the =~/.guix-extra-profiles= path and sourced by my =~/.profile= when I log in.

To make the management of multiple profiles easier, I've created a couple of shell scripts:

** Activating Profiles

This script accepts a space-separated list of manifest file names (without extension) under the =~/.config/guix/manifests= folder and then installs those profiles for the first time.  For example:

#+begin_src sh

  activate-profiles desktop emacs music

#+end_src

This script is maintained in *.local/bin/activate-profiles:*

** Updating Profiles

This script accepts a space-separated list of manifest file names (without extension) under the =~/.config/guix/manifests= folder and then installs any updates to the packages contained within them.  If no profile names are provided, it walks the list of profile directories under =~/.guix-extra-profiles= and updates each one of them.

#+begin_src sh

  update-profiles emacs

#+end_src

This script is maintained in *.local/bin/update-profiles:*

* Dotfiles Management

Since I keep all of my important configuration files in Org Mode code blocks, I have to ensure that the real configuration files are kept up to date when I sync the latest changes to my [[https://github.com/daviwil/dotfiles][dotfiles]] repo.  I've written a couple of scripts to simplify that process:

** Syncing

When I want to sync my dotfiles repo into my local clone which likely has uncommitted changes, I run =sync-dotfiles=.  This script first makes sure that all Org files are saved in a running Emacs instance and then stashes everything before pulling the latest changes from =origin=.  After pulling, the stash is popped and then the script verifies there are no merge conflicts from the stash before proceeding.  If there are no conflicts, =update-dotfiles= is run, otherwise I'll fix the merge conflicts manually and run =update-dotfiles= myself.

This script is maintained in *.local/bin/sync-dotfiles*

* Nix Package Manager

In an ironic twist of fate, I've found that certain tools I need to use are more easily available in the Nix package repository, so I use it to install them.

#+begin_src conf :tangle .nix-channels

  https://nixos.org/channels/nixpkgs-unstable nixpkgs

#+end_src

The channel needs to be updated before any packages can be installed:

#+begin_src sh

  nix-channel --update

#+end_src

Installing packages:

#+begin_src sh

  nix-env -i nodejs dotnet-sdk gh hledger
  # nix-env -iA nixpkgs.nodejs-12_x # For a specific version

#+end_src

* System Installation

Here's a guide for how I install my GNU Guix systems from scratch.  This process is simplified because I've already prepared a reusable system configuration so you might need to do extra work if you end up following this for your own system install.

** Building the Installation Image

Since I use modern Thinkpads, I have to use the non-free kernel and firmware blobs from the [[https://gitlab.com/nonguix/nonguix][nonguix]] channel.  After cloning the repo, the installation image can be built with this command:

#+begin_src sh

  # Create a slightly larger install image to have some headroom
  # for temporary file creation and avoid "no space free" errors
  guix system image ./install.scm --image-size=5G

#+end_src

*NOTE:* It can take an hour or more for this to complete, so be patient...

Once the build is complete, Guix will print out the path to the disk image file that was created.  You can now write the installation image to a USB stick using =dd=:

#+begin_src sh

  sudo dd if=/gnu/store/nyg6jv3a4l0pbcvb0x7jfsb60k9qalga-disk-image of=/dev/sdX status=progress

#+end_src
